{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport isRetryAllowed from 'is-retry-allowed';\nvar namespace = 'axios-retry';\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\nexport function isNetworkError(error) {\n  return !error.response && Boolean(error.code) && // Prevents retrying cancelled requests\n  error.code !== 'ECONNABORTED' && // Prevents retrying timed out requests\n  isRetryAllowed(error); // Prevents retrying unsafe errors\n}\nvar SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nvar IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\nexport function isRetryableError(error) {\n  return error.code !== 'ECONNABORTED' && (!error.response || error.response.status >= 500 && error.response.status <= 599);\n}\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\nexport function isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\nexport function isIdempotentRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n/**\n * @param  {Error}  error\n * @return {boolean | Promise}\n */\n\nexport function isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n/**\n * @return {number} - delay in milliseconds, always 0\n */\n\nfunction noDelay() {\n  return 0;\n}\n/**\n * @param  {number} [retryNumber=0]\n * @return {number} - delay in milliseconds\n */\n\n\nexport function exponentialDelay() {\n  var retryNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var delay = Math.pow(2, retryNumber) * 100;\n  var randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay\n\n  return delay + randomSum;\n}\n/**\n * Initializes and returns the retry state for the given request/config\n * @param  {AxiosRequestConfig} config\n * @return {Object}\n */\n\nfunction getCurrentState(config) {\n  var currentState = config[namespace] || {};\n  currentState.retryCount = currentState.retryCount || 0;\n  config[namespace] = currentState;\n  return currentState;\n}\n/**\n * Returns the axios-retry options for the current request\n * @param  {AxiosRequestConfig} config\n * @param  {AxiosRetryConfig} defaultOptions\n * @return {AxiosRetryConfig}\n */\n\n\nfunction getRequestOptions(config, defaultOptions) {\n  return _objectSpread(_objectSpread({}, defaultOptions), config[namespace]);\n}\n/**\n * @param  {Axios} axios\n * @param  {AxiosRequestConfig} config\n */\n\n\nfunction fixConfig(axios, config) {\n  if (axios.defaults.agent === config.agent) {\n    delete config.agent;\n  }\n\n  if (axios.defaults.httpAgent === config.httpAgent) {\n    delete config.httpAgent;\n  }\n\n  if (axios.defaults.httpsAgent === config.httpsAgent) {\n    delete config.httpsAgent;\n  }\n}\n/**\n * Checks retryCondition if request can be retried. Handles it's retruning value or Promise.\n * @param  {number} retries\n * @param  {Function} retryCondition\n * @param  {Object} currentState\n * @param  {Error} error\n * @return {boolean}\n */\n\n\nfunction shouldRetry(_x, _x2, _x3, _x4) {\n  return _shouldRetry.apply(this, arguments);\n}\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Exponential back-off retry delay between requests\n * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});\n *\n * // Custom retry delay\n * axiosRetry(axios, { retryDelay : (retryCount) => {\n *   return retryCount * 1000;\n * }});\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Allows request-specific configuration\n * client\n *   .get('/test', {\n *     'axios-retry': {\n *       retries: 0\n *     }\n *   })\n *   .catch(error => { // The first request fails\n *     error !== undefined\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [defaultOptions]\n * @param {number} [defaultOptions.retries=3] Number of retries\n * @param {boolean} [defaultOptions.shouldResetTimeout=false]\n *        Defines if the timeout should be reset between retries\n * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]\n *        A function to determine if the error can be retried\n * @param {Function} [defaultOptions.retryDelay=noDelay]\n *        A function to determine the delay between retry requests\n */\n\n\nfunction _shouldRetry() {\n  _shouldRetry = _asyncToGenerator(function* (retries, retryCondition, currentState, error) {\n    var shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error); // This could be a promise\n\n    if (typeof shouldRetryOrPromise === 'object') {\n      try {\n        yield shouldRetryOrPromise;\n        return true;\n      } catch (_err) {\n        return false;\n      }\n    }\n\n    return shouldRetryOrPromise;\n  });\n  return _shouldRetry.apply(this, arguments);\n}\n\nexport default function axiosRetry(axios, defaultOptions) {\n  axios.interceptors.request.use(config => {\n    var currentState = getCurrentState(config);\n    currentState.lastRequestTime = Date.now();\n    return config;\n  });\n  axios.interceptors.response.use(null, /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (error) {\n      var {\n        config\n      } = error; // If we have no information to retry the request\n\n      if (!config) {\n        return Promise.reject(error);\n      }\n\n      var {\n        retries = 3,\n        retryCondition = isNetworkOrIdempotentRequestError,\n        retryDelay = noDelay,\n        shouldResetTimeout = false\n      } = getRequestOptions(config, defaultOptions);\n      var currentState = getCurrentState(config);\n\n      if (yield shouldRetry(retries, retryCondition, currentState, error)) {\n        currentState.retryCount += 1;\n        var delay = retryDelay(currentState.retryCount, error); // Axios fails merging this configuration to the default configuration because it has an issue\n        // with circular structures: https://github.com/mzabriskie/axios/issues/370\n\n        fixConfig(axios, config);\n\n        if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {\n          var lastRequestDuration = Date.now() - currentState.lastRequestTime; // Minimum 1ms timeout (passing 0 or less to XHR means no timeout)\n\n          config.timeout = Math.max(config.timeout - lastRequestDuration - delay, 1);\n        }\n\n        config.transformRequest = [data => data];\n        return new Promise(resolve => setTimeout(() => resolve(axios(config)), delay));\n      }\n\n      return Promise.reject(error);\n    });\n\n    return function (_x5) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n} // Compatibility with CommonJS\n\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.exponentialDelay = exponentialDelay;\naxiosRetry.isRetryableError = isRetryableError;","map":{"version":3,"sources":["/Users/kopcion/LearningFromHumanPreferences-master/frontend/node_modules/axios-retry/es/index.mjs"],"names":["namespace","error","Boolean","isRetryAllowed","SAFE_HTTP_METHODS","IDEMPOTENT_HTTP_METHODS","isRetryableError","isNetworkError","isIdempotentRequestError","retryNumber","delay","Math","randomSum","currentState","config","axios","shouldRetry","shouldRetryOrPromise","retryCondition","getCurrentState","Date","Promise","retries","retryDelay","shouldResetTimeout","getRequestOptions","fixConfig","lastRequestDuration","data","resolve","setTimeout","axiosRetry"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,cAAA,MAAA,kBAAA;AAEA,IAAMA,SAAS,GAAf,aAAA;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAAA,cAAA,CAAA,KAAA,EAA+B;AACpC,SACE,CAACC,KAAK,CAAN,QAAA,IACAC,OAAO,CAACD,KAAK,CADb,IACO,CADP,IACuB;AACvBA,EAAAA,KAAK,CAALA,IAAAA,KAFA,cAAA,IAEiC;AACjCE,EAAAA,cAAc,CALoB,KAKpB,CAJhB,CADoC,CAMjC;AACJ;AAED,IAAMC,iBAAiB,GAAG,CAAA,KAAA,EAAA,MAAA,EAA1B,SAA0B,CAA1B;AACA,IAAMC,uBAAuB,GAAGD,iBAAiB,CAAjBA,MAAAA,CAAyB,CAAA,KAAA,EAAzD,QAAyD,CAAzBA,CAAhC;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAAA,gBAAA,CAAA,KAAA,EAAiC;AACtC,SACEH,KAAK,CAALA,IAAAA,KAAAA,cAAAA,KACC,CAACA,KAAK,CAAN,QAAA,IAAoBA,KAAK,CAALA,QAAAA,CAAAA,MAAAA,IAAAA,GAAAA,IAAgCA,KAAK,CAALA,QAAAA,CAAAA,MAAAA,IAFvD,GACEA,CADF;AAID;AAED;AACA;AACA;AACA;;AACA,OAAO,SAAA,kBAAA,CAAA,KAAA,EAAmC;AACxC,MAAI,CAACA,KAAK,CAAV,MAAA,EAAmB;AACjB;AACA,WAAA,KAAA;AACD;;AAED,SAAOK,gBAAgB,CAAhBA,KAAgB,CAAhBA,IAA2BF,iBAAiB,CAAjBA,OAAAA,CAA0BH,KAAK,CAALA,MAAAA,CAA1BG,MAAAA,MAAmD,CAArF,CAAA;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAAA,wBAAA,CAAA,KAAA,EAAyC;AAC9C,MAAI,CAACH,KAAK,CAAV,MAAA,EAAmB;AACjB;AACA,WAAA,KAAA;AACD;;AAED,SAAOK,gBAAgB,CAAhBA,KAAgB,CAAhBA,IAA2BD,uBAAuB,CAAvBA,OAAAA,CAAgCJ,KAAK,CAALA,MAAAA,CAAhCI,MAAAA,MAAyD,CAA3F,CAAA;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAAA,iCAAA,CAAA,KAAA,EAAkD;AACvD,SAAOE,cAAc,CAAdA,KAAc,CAAdA,IAAyBC,wBAAwB,CAAxD,KAAwD,CAAxD;AACD;AAED;AACA;AACA;;AACA,SAAA,OAAA,GAAmB;AACjB,SAAA,CAAA;AACD;AAED;AACA;AACA;AACA;;;AACA,OAAO,SAAA,gBAAA,GAA2C;AAAA,MAAjBC,WAAiB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;AAChD,MAAMC,KAAK,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAAA,WAAAA,IAAd,GAAA;AACA,MAAMC,SAAS,GAAGF,KAAK,GAALA,GAAAA,GAAcC,IAAI,CAFY,MAEhBA,EAAhC,CAFgD,CAED;;AAC/C,SAAOD,KAAK,GAAZ,SAAA;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,SAAA,eAAA,CAAA,MAAA,EAAiC;AAC/B,MAAMG,YAAY,GAAGC,MAAM,CAANA,SAAM,CAANA,IAArB,EAAA;AACAD,EAAAA,YAAY,CAAZA,UAAAA,GAA0BA,YAAY,CAAZA,UAAAA,IAA1BA,CAAAA;AACAC,EAAAA,MAAM,CAANA,SAAM,CAANA,GAAAA,YAAAA;AACA,SAAA,YAAA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAA,iBAAA,CAAA,MAAA,EAAA,cAAA,EAAmD;AACjD,SAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,cAAA,CAAA,EAA+BA,MAAM,CAArC,SAAqC,CAArC,CAAA;AACD;AAED;AACA;AACA;AACA;;;AACA,SAAA,SAAA,CAAA,KAAA,EAAA,MAAA,EAAkC;AAChC,MAAIC,KAAK,CAALA,QAAAA,CAAAA,KAAAA,KAAyBD,MAAM,CAAnC,KAAA,EAA2C;AACzC,WAAOA,MAAM,CAAb,KAAA;AACD;;AACD,MAAIC,KAAK,CAALA,QAAAA,CAAAA,SAAAA,KAA6BD,MAAM,CAAvC,SAAA,EAAmD;AACjD,WAAOA,MAAM,CAAb,SAAA;AACD;;AACD,MAAIC,KAAK,CAALA,QAAAA,CAAAA,UAAAA,KAA8BD,MAAM,CAAxC,UAAA,EAAqD;AACnD,WAAOA,MAAM,CAAb,UAAA;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SACeE,W;;;AAef;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;mCAlEA,WAAA,OAAA,EAAA,cAAA,EAAA,YAAA,EAAA,KAAA,EAAyE;AACvE,QAAMC,oBAAoB,GAAGJ,YAAY,CAAZA,UAAAA,GAAAA,OAAAA,IAAqCK,cAAc,CADT,KACS,CAAhF,CADuE,CAGvE;;AACA,QAAI,OAAA,oBAAA,KAAJ,QAAA,EAA8C;AAC5C,UAAI;AACF,cAAA,oBAAA;AACA,eAAA,IAAA;AAFF,OAAA,CAGE,OAAA,IAAA,EAAa;AACb,eAAA,KAAA;AACD;AACF;;AACD,WAAA,oBAAA;;;;;AAuDF,eAAe,SAAA,UAAA,CAAA,KAAA,EAAA,cAAA,EAA2C;AACxDH,EAAAA,KAAK,CAALA,YAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAgCD,MAAD,IAAY;AACzC,QAAMD,YAAY,GAAGM,eAAe,CAApC,MAAoC,CAApC;AACAN,IAAAA,YAAY,CAAZA,eAAAA,GAA+BO,IAAI,CAAnCP,GAA+BO,EAA/BP;AACA,WAAA,MAAA;AAHFE,GAAAA;AAMAA,EAAAA,KAAK,CAALA,YAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,IAAAA,EAAAA,aAAAA,YAAAA;AAAAA,QAAAA,IAAAA,GAAAA,iBAAAA,CAAsC,WAAA,KAAA,EAAiB;AACrD,UAAM;AAAED,QAAAA;AAAF,UAD+C,KACrD,CADqD,CAGrD;;AACA,UAAI,CAAJ,MAAA,EAAa;AACX,eAAOO,OAAO,CAAPA,MAAAA,CAAP,KAAOA,CAAP;AACD;;AAED,UAAM;AACJC,QAAAA,OAAO,GADH,CAAA;AAEJJ,QAAAA,cAAc,GAFV,iCAAA;AAGJK,QAAAA,UAAU,GAHN,OAAA;AAIJC,QAAAA,kBAAkB,GAAG;AAJjB,UAKFC,iBAAiB,CAAA,MAAA,EALrB,cAKqB,CALrB;AAOA,UAAMZ,YAAY,GAAGM,eAAe,CAApC,MAAoC,CAApC;;AAEA,UAAA,MAAUH,WAAW,CAAA,OAAA,EAAA,cAAA,EAAA,YAAA,EAArB,KAAqB,CAArB,EAAqE;AACnEH,QAAAA,YAAY,CAAZA,UAAAA,IAAAA,CAAAA;AACA,YAAMH,KAAK,GAAGa,UAAU,CAACV,YAAY,CAAb,UAAA,EAF2C,KAE3C,CAAxB,CAFmE,CAInE;AACA;;AACAa,QAAAA,SAAS,CAAA,KAAA,EAATA,MAAS,CAATA;;AAEA,YAAI,CAAA,kBAAA,IAAuBZ,MAAM,CAA7B,OAAA,IAAyCD,YAAY,CAAzD,eAAA,EAA2E;AACzE,cAAMc,mBAAmB,GAAGP,IAAI,CAAJA,GAAAA,KAAaP,YAAY,CADoB,eACzE,CADyE,CAEzE;;AACAC,UAAAA,MAAM,CAANA,OAAAA,GAAiBH,IAAI,CAAJA,GAAAA,CAASG,MAAM,CAANA,OAAAA,GAAAA,mBAAAA,GAATH,KAAAA,EAAjBG,CAAiBH,CAAjBG;AACD;;AAEDA,QAAAA,MAAM,CAANA,gBAAAA,GAA0B,CAAEc,IAAD,IAA3Bd,IAA0B,CAA1BA;AAEA,eAAO,IAAA,OAAA,CAAae,OAAD,IAAaC,UAAU,CAAC,MAAMD,OAAO,CAACd,KAAK,CAApB,MAAoB,CAAN,CAAd,EAA1C,KAA0C,CAAnC,CAAP;AACD;;AAED,aAAOM,OAAO,CAAPA,MAAAA,CAAP,KAAOA,CAAP;AApCFN,KAAAA,CAAAA;;AAAAA,WAAAA,UAAAA,GAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA;AAAAA,KAAAA;AAAAA,GAAAA,EAAAA;EAwCF;;AACAgB,UAAU,CAAVA,cAAAA,GAAAA,cAAAA;AACAA,UAAU,CAAVA,kBAAAA,GAAAA,kBAAAA;AACAA,UAAU,CAAVA,wBAAAA,GAAAA,wBAAAA;AACAA,UAAU,CAAVA,iCAAAA,GAAAA,iCAAAA;AACAA,UAAU,CAAVA,gBAAAA,GAAAA,gBAAAA;AACAA,UAAU,CAAVA,gBAAAA,GAAAA,gBAAAA","sourcesContent":["import isRetryAllowed from 'is-retry-allowed';\n\nconst namespace = 'axios-retry';\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkError(error) {\n  return (\n    !error.response &&\n    Boolean(error.code) && // Prevents retrying cancelled requests\n    error.code !== 'ECONNABORTED' && // Prevents retrying timed out requests\n    isRetryAllowed(error)\n  ); // Prevents retrying unsafe errors\n}\n\nconst SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nconst IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isRetryableError(error) {\n  return (\n    error.code !== 'ECONNABORTED' &&\n    (!error.response || (error.response.status >= 500 && error.response.status <= 599))\n  );\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isIdempotentRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean | Promise}\n */\nexport function isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n\n/**\n * @return {number} - delay in milliseconds, always 0\n */\nfunction noDelay() {\n  return 0;\n}\n\n/**\n * @param  {number} [retryNumber=0]\n * @return {number} - delay in milliseconds\n */\nexport function exponentialDelay(retryNumber = 0) {\n  const delay = Math.pow(2, retryNumber) * 100;\n  const randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay\n  return delay + randomSum;\n}\n\n/**\n * Initializes and returns the retry state for the given request/config\n * @param  {AxiosRequestConfig} config\n * @return {Object}\n */\nfunction getCurrentState(config) {\n  const currentState = config[namespace] || {};\n  currentState.retryCount = currentState.retryCount || 0;\n  config[namespace] = currentState;\n  return currentState;\n}\n\n/**\n * Returns the axios-retry options for the current request\n * @param  {AxiosRequestConfig} config\n * @param  {AxiosRetryConfig} defaultOptions\n * @return {AxiosRetryConfig}\n */\nfunction getRequestOptions(config, defaultOptions) {\n  return { ...defaultOptions, ...config[namespace] };\n}\n\n/**\n * @param  {Axios} axios\n * @param  {AxiosRequestConfig} config\n */\nfunction fixConfig(axios, config) {\n  if (axios.defaults.agent === config.agent) {\n    delete config.agent;\n  }\n  if (axios.defaults.httpAgent === config.httpAgent) {\n    delete config.httpAgent;\n  }\n  if (axios.defaults.httpsAgent === config.httpsAgent) {\n    delete config.httpsAgent;\n  }\n}\n\n/**\n * Checks retryCondition if request can be retried. Handles it's retruning value or Promise.\n * @param  {number} retries\n * @param  {Function} retryCondition\n * @param  {Object} currentState\n * @param  {Error} error\n * @return {boolean}\n */\nasync function shouldRetry(retries, retryCondition, currentState, error) {\n  const shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error);\n\n  // This could be a promise\n  if (typeof shouldRetryOrPromise === 'object') {\n    try {\n      await shouldRetryOrPromise;\n      return true;\n    } catch (_err) {\n      return false;\n    }\n  }\n  return shouldRetryOrPromise;\n}\n\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Exponential back-off retry delay between requests\n * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});\n *\n * // Custom retry delay\n * axiosRetry(axios, { retryDelay : (retryCount) => {\n *   return retryCount * 1000;\n * }});\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Allows request-specific configuration\n * client\n *   .get('/test', {\n *     'axios-retry': {\n *       retries: 0\n *     }\n *   })\n *   .catch(error => { // The first request fails\n *     error !== undefined\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [defaultOptions]\n * @param {number} [defaultOptions.retries=3] Number of retries\n * @param {boolean} [defaultOptions.shouldResetTimeout=false]\n *        Defines if the timeout should be reset between retries\n * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]\n *        A function to determine if the error can be retried\n * @param {Function} [defaultOptions.retryDelay=noDelay]\n *        A function to determine the delay between retry requests\n */\nexport default function axiosRetry(axios, defaultOptions) {\n  axios.interceptors.request.use((config) => {\n    const currentState = getCurrentState(config);\n    currentState.lastRequestTime = Date.now();\n    return config;\n  });\n\n  axios.interceptors.response.use(null, async (error) => {\n    const { config } = error;\n\n    // If we have no information to retry the request\n    if (!config) {\n      return Promise.reject(error);\n    }\n\n    const {\n      retries = 3,\n      retryCondition = isNetworkOrIdempotentRequestError,\n      retryDelay = noDelay,\n      shouldResetTimeout = false\n    } = getRequestOptions(config, defaultOptions);\n\n    const currentState = getCurrentState(config);\n\n    if (await shouldRetry(retries, retryCondition, currentState, error)) {\n      currentState.retryCount += 1;\n      const delay = retryDelay(currentState.retryCount, error);\n\n      // Axios fails merging this configuration to the default configuration because it has an issue\n      // with circular structures: https://github.com/mzabriskie/axios/issues/370\n      fixConfig(axios, config);\n\n      if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {\n        const lastRequestDuration = Date.now() - currentState.lastRequestTime;\n        // Minimum 1ms timeout (passing 0 or less to XHR means no timeout)\n        config.timeout = Math.max(config.timeout - lastRequestDuration - delay, 1);\n      }\n\n      config.transformRequest = [(data) => data];\n\n      return new Promise((resolve) => setTimeout(() => resolve(axios(config)), delay));\n    }\n\n    return Promise.reject(error);\n  });\n}\n\n// Compatibility with CommonJS\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.exponentialDelay = exponentialDelay;\naxiosRetry.isRetryableError = isRetryableError;\n"]},"metadata":{},"sourceType":"module"}